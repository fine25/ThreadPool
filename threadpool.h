#ifndef THREADPOOL_H
#define THREADPOOL_H
#include<vector>
#include<queue>
#include<memory>
#include<atomic>
#include<mutex>
#include<condition_variable>
#include<functional>
#include<unordered_map>
//Any类型，可接收任意数据类型
class Any
{
public:
	Any() = default;
	~Any() = default;
	Any(const Any&) = delete;
	Any operator=(const Any&) = delete;
	Any(Any&&) = default;
	Any& operator=(Any&&) = default;

	//此构造函数可以让Any类型接收任意其他数据
	template<typename T>
	Any(T data) :base_(std::make_unique<Derive<T>>(data)){}

	//把Any对象里面存储的data数据提取出来
	template<typename T>
	T cast_()
	{
		//从base_找到它所指向的Derive对象，从它里面取出data成员变量
		Derive<T>* pd = dynamic_cast<Derive<T>*>(base_.get());
		if (pd == nullptr)
		{
			throw "type is unmatch!";
		}
		return pd->data_;

	}
private:
	//基类
	class Base
	{
	public:
		virtual ~Base() = default;
	};
	//派生类
	template<typename T>
	class Derive :public Base
	{
	public:
		Derive(T data):data_(data){}
		T data_;//保留其他任意类型
	};
	//定义一个基类指针
	std::unique_ptr<Base> base_;
};

//实现一个信号量类
class Semaphore
{
public:
	Semaphore(int limit = 0)
		:resLimit_(limit)
		,isExit_(false)
	{}
	~Semaphore()
	{
	isExit_ = true;
	}


	//获取一个信号资源
	void wait()
	{
		if(isExit_)
	return;
		std::unique_lock<std::mutex> lock(mtx_);
		cond_.wait(lock, [&]()->bool {return resLimit_ > 0; });
		resLimit_--;
	}

	//增加一个信号资源
	void post()
	{
		if(isExit_)
	return;
		std::unique_lock<std::mutex> lock(mtx_);
		resLimit_++;
		cond_.notify_all();
	}

private:
	std::atomic_bool isExit_;
	int resLimit_;
	std::mutex mtx_;
	std::condition_variable cond_;

};

class Task;
//实现接收提交到线程池的task任务执行完成后的返回值类型Result
class Result
{
public:
	Result(std::shared_ptr<Task> task, bool isvalid = true);
	~Result() = default;
	//获取任务执行完的返回值
	void setValue(Any any);

	//get,用户调用此方法获取task的返回值
	Any get();
private:
	Any any_;//存储任务的返回值
	Semaphore sem_;//线程通信信号量
	std::shared_ptr<Task> task_;//指向对应获取返回值的任务对象
	std::atomic_bool isValid_;//返回值是否有效
};

//任务抽象基类，用户可自定义任意任务类型，丛Task继承，重写run方法
class Task {
public:
	Task();
	~Task() = default;
	void exec();
	void setResult(Result* res);
	virtual Any run() = 0;
private:
	Result* result_;//Result对象的声明周期
};

//线程池支持的模式
enum class PoolMode {
	MODE_FIXED,//线程固定数量
	MODE_CACHED,//数量动态增涨
};

//线程类型
class Thread {
public:
	//线程函数对象类型
	using ThreadFunc = std::function<void(int)>;

	//线程构造
	Thread(ThreadFunc func);
	// 线程析构
	~Thread();
	
	//启动线程
	void start();

	//获取线程id
	int getId()const;
private:
	ThreadFunc func_;
	static int generateId_;
	int threadId_;//保存线程id
};

//线程池类型
class ThreadPool {
public:
	ThreadPool();
	~ThreadPool();

	//设置任务队列上限值
	void setTaskQueMaxThreshHold(int threshhold);

	//设置最大线程上线阈值
	void setThreadSizeThreshHold(int threshhold);

	//设置线程池工作模式
	void setMode(PoolMode mode);


	//提交任务
		/*example:
		class MyTask:public Task{
		public:
		Any run();
			 };*/
	Result submitTask(std::shared_ptr<Task> sp);

	//开启线程池
	void start(int initThreadSize =4);

	ThreadPool(const ThreadPool&) = delete;
	ThreadPool& operator=(const ThreadPool&) = delete;

private:
	//定义线程函数
	void threadFunc(int threadid);
	
	//检查运行的状态
	bool checkRunningState()const;


private:
	//优化std::vector<Thread*> threads_;//线程列表
	//优化std::vector<std::unique_ptr<Thread>> threads_;
	std::unordered_map<int, std::unique_ptr<Thread>> threads_;
	int initThreadSize_;		//初始的线程数量
	int threadSizeThreshHold_; //线程数量上限阈值
	std::atomic_int curThreadSize_;//记录当前线程总数量
	std::atomic_int idleThreadSize_;//记录空闲线程数量

	std::queue<std::shared_ptr<Task> > taskQue_;//任务队列，用智能指针防止传进对象的生命周期短，引发错误。
	std::atomic_int taskSize_;  //任务的数量
	int taskQueMaxThreshHold_;	//任务队列数量上线阈值

	std::mutex taskQueMtx_;		//保证任务队列线程安全
	std::condition_variable notFull_;//任务队列不满
	std::condition_variable notEmpty_;//任务队列不空
	std::condition_variable exitCond_;//线程池回收

	PoolMode poolMode_;//当前线程池的工作模式
	
	std::atomic_bool isPoolRunning;//当前线程池启动状态

};

#endif // !THREADPOOL_H

